import { PrismaClient } from "@prisma/client";
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

async function createDummyData() {
  console.log("üå± Creating dummy data for the entire system...");

  try {
    // Clear existing data (optional - comment out if you want to keep existing data)
    console.log("üßπ Clearing existing data...");
    await prisma.orderItem.deleteMany();
    await prisma.order.deleteMany();
    await prisma.cartItem.deleteMany();
    await prisma.cart.deleteMany();
    await prisma.businessProfile.deleteMany();
    await prisma.inquiryForm.deleteMany();
    await prisma.product.deleteMany();
    await prisma.user.deleteMany();
    await prisma.rolePermission.deleteMany();
    await prisma.permission.deleteMany();
    await prisma.role.deleteMany();

    // Create roles
    console.log("üë• Creating roles...");
    const retailRole = await prisma.role.create({
      data: {
        id: 1,
        name: "retail",
        description: "Regular retail customers"
      }
    });

    const wholesaleRole = await prisma.role.create({
      data: {
        id: 2,
        name: "wholesale",
        description: "Wholesale business customers"
      }
    });

    const adminRole = await prisma.role.create({
      data: {
        id: 3,
        name: "admin",
        description: "System administrators"
      }
    });

    // Create permissions
    console.log("üîê Creating permissions...");
    const permissions = await Promise.all([
      prisma.permission.create({ data: { name: "manage_users", description: "Manage user accounts" } }),
      prisma.permission.create({ data: { name: "manage_products", description: "Manage product catalog" } }),
      prisma.permission.create({ data: { name: "manage_orders", description: "Manage customer orders" } }),
      prisma.permission.create({ data: { name: "view_reports", description: "View business reports" } }),
      prisma.permission.create({ data: { name: "manage_wholesale", description: "Manage wholesale accounts" } }),
    ]);

    // Assign permissions to roles
    console.log("üîó Assigning permissions to roles...");
    // Admin gets all permissions
    for (const permission of permissions) {
      await prisma.rolePermission.create({
        data: {
          roleId: adminRole.id,
          permissionId: permission.id
        }
      });
    }

    // Wholesale gets limited permissions
    await prisma.rolePermission.create({
      data: {
        roleId: wholesaleRole.id,
        permissionId: permissions.find(p => p.name === "view_reports")!.id
      }
    });

    // Create admin user
    console.log("üë®‚Äçüíº Creating admin user...");
    const hashedAdminPassword = await bcrypt.hash("admin123", 10);
    const adminUser = await prisma.user.create({
      data: {
        name: "System Administrator",
        email: "admin@nkc.com",
        passwordHash: hashedAdminPassword,
        roleId: adminRole.id,
        status: "active",
        phone: "+1234567890"
      }
    });

    // Create dummy retail users
    console.log("üõçÔ∏è Creating retail customers...");
    const retailUsers: any[] = [];
    const retailUserData = [
      { name: "Alice Johnson", email: "alice@example.com", phone: "+1234567891" },
      { name: "Bob Smith", email: "bob@example.com", phone: "+1234567892" },
      { name: "Carol Davis", email: "carol@example.com", phone: "+1234567893" },
      { name: "David Wilson", email: "david@example.com", phone: "+1234567894" },
      { name: "Eva Brown", email: "eva@example.com", phone: "+1234567895" },
      { name: "Frank Miller", email: "frank@example.com", phone: "+1234567896" },
      { name: "Grace Taylor", email: "grace@example.com", phone: "+1234567897" },
      { name: "Henry Anderson", email: "henry@example.com", phone: "+1234567898" },
    ];

    for (const userData of retailUserData) {
      const hashedPassword = await bcrypt.hash("password123", 10);
      const user = await prisma.user.create({
        data: {
          ...userData,
          passwordHash: hashedPassword,
          roleId: retailRole.id,
          status: "active"
        }
      });
      retailUsers.push(user);
    }

    // Create dummy wholesale users
    console.log("üè¢ Creating wholesale customers...");
    const wholesaleUsers: any[] = [];
    const wholesaleUserData = [
      { name: "John Corporate", email: "john@bigstore.com", phone: "+1234567899", company: "Big Store Inc." },
      { name: "Sarah Business", email: "sarah@furniture-plus.com", phone: "+1234567800", company: "Furniture Plus LLC" },
      { name: "Mike Wholesale", email: "mike@bulk-buyers.com", phone: "+1234567801", company: "Bulk Buyers Co." },
      { name: "Lisa Enterprise", email: "lisa@office-solutions.com", phone: "+1234567802", company: "Office Solutions Ltd." },
    ];

    for (const userData of wholesaleUserData) {
      const hashedPassword = await bcrypt.hash("password123", 10);
      const { company, ...userDataWithoutCompany } = userData;
      const user = await prisma.user.create({
        data: {
          ...userDataWithoutCompany,
          passwordHash: hashedPassword,
          roleId: wholesaleRole.id,
          status: "active"
        }
      });

      // Create business profile for wholesale users
      await prisma.businessProfile.create({
        data: {
          userId: user.id,
          companyName: company,
          taxId: `TAX${Math.random().toString(36).substr(2, 9).toUpperCase()}`,
          verified: Math.random() > 0.5,
          documents: [`/documents/${company.toLowerCase().replace(/\s+/g, '-')}-license.pdf`]
        }
      });

      wholesaleUsers.push(user);
    }

    // Create dummy products
    console.log("üõãÔ∏è Creating products...");
    const products: any[] = [];
    const productData = [
      {
        slug: "modern-sofa-grey",
        nameEn: "Modern Grey Sofa",
        nameVi: "Sofa X√°m Hi·ªán ƒê·∫°i",
        descriptionEn: "Comfortable modern sofa with grey upholstery",
        descriptionVi: "Sofa hi·ªán ƒë·∫°i tho·∫£i m√°i v·ªõi b·ªçc da m√†u x√°m",
        price: 599.99,
        originalPrice: 799.99,
        images: ["/images/business-slide1.jpg", "/images/business-slide2.jpg"],
        room: "Living Room",
        type: "Sofa",
        category: "Furniture",
        inStock: true,
        stock: 15,
        featured: true,
        featuresEn: ["3-seater", "Comfortable cushions", "Durable fabric"],
        featuresVi: ["3 ch·ªó ng·ªìi", "ƒê·ªám tho·∫£i m√°i", "V·∫£i b·ªÅn"],
        longDescriptionEn: "This modern grey sofa is perfect for any contemporary living room. Made with high-quality materials and designed for comfort.",
        longDescriptionVi: "Chi·∫øc sofa x√°m hi·ªán ƒë·∫°i n√†y ho√†n h·∫£o cho b·∫•t k·ª≥ ph√≤ng kh√°ch ƒë∆∞∆°ng ƒë·∫°i n√†o. ƒê∆∞·ª£c l√†m t·ª´ v·∫≠t li·ªáu ch·∫•t l∆∞·ª£ng cao v√† thi·∫øt k·∫ø ƒë·ªÉ tho·∫£i m√°i.",
        specificationsEn: { "Width": "220cm", "Depth": "90cm", "Height": "85cm", "Material": "Fabric" },
        specificationsVi: { "Chi·ªÅu r·ªông": "220cm", "Chi·ªÅu s√¢u": "90cm", "Chi·ªÅu cao": "85cm", "Ch·∫•t li·ªáu": "V·∫£i" }
      },
      {
        slug: "oak-dining-table",
        nameEn: "Oak Dining Table",
        nameVi: "B√†n ƒÇn G·ªó S·ªìi",
        descriptionEn: "Solid oak dining table for 6 people",
        descriptionVi: "B√†n ƒÉn g·ªó s·ªìi nguy√™n kh·ªëi cho 6 ng∆∞·ªùi",
        price: 899.99,
        originalPrice: 1199.99,
        images: ["/images/business-slide3.jpg", "/images/business-slide5.jpg"],
        room: "Dining Room",
        type: "Table",
        category: "Furniture",
        inStock: true,
        stock: 8,
        featured: true,
        featuresEn: ["Solid oak", "Seats 6", "Natural finish"],
        featuresVi: ["G·ªó s·ªìi nguy√™n kh·ªëi", "6 ch·ªó ng·ªìi", "Ho√†n thi·ªán t·ª± nhi√™n"],
        longDescriptionEn: "Beautiful solid oak dining table that can comfortably seat 6 people. Perfect for family meals and entertaining.",
        longDescriptionVi: "B√†n ƒÉn g·ªó s·ªìi nguy√™n kh·ªëi ƒë·∫πp c√≥ th·ªÉ ng·ªìi tho·∫£i m√°i cho 6 ng∆∞·ªùi. Ho√†n h·∫£o cho b·ªØa ƒÉn gia ƒë√¨nh v√† ti·∫øp kh√°ch.",
        specificationsEn: { "Length": "180cm", "Width": "90cm", "Height": "75cm", "Material": "Solid Oak" },
        specificationsVi: { "Chi·ªÅu d√†i": "180cm", "Chi·ªÅu r·ªông": "90cm", "Chi·ªÅu cao": "75cm", "Ch·∫•t li·ªáu": "G·ªó S·ªìi Nguy√™n Kh·ªëi" }
      },
      {
        slug: "king-size-bed",
        nameEn: "King Size Bed Frame",
        nameVi: "Khung Gi∆∞·ªùng King Size",
        descriptionEn: "Elegant king size bed frame with headboard",
        descriptionVi: "Khung gi∆∞·ªùng king size thanh l·ªãch v·ªõi ƒë·∫ßu gi∆∞·ªùng",
        price: 749.99,
        originalPrice: 999.99,
        images: ["/images/business-slide6.jpg", "/images/business-slide1.jpg"],
        room: "Bedroom",
        type: "Bed",
        category: "Furniture",
        inStock: true,
        stock: 12,
        featured: false,
        featuresEn: ["King size", "Upholstered headboard", "Sturdy construction"],
        featuresVi: ["K√≠ch th∆∞·ªõc king", "ƒê·∫ßu gi∆∞·ªùng b·ªçc n·ªám", "C·∫•u tr√∫c ch·∫Øc ch·∫Øn"],
        longDescriptionEn: "This elegant king size bed frame features a beautiful upholstered headboard and sturdy construction for lasting comfort.",
        longDescriptionVi: "Khung gi∆∞·ªùng king size thanh l·ªãch n√†y c√≥ ƒë·∫ßu gi∆∞·ªùng b·ªçc n·ªám ƒë·∫πp v√† c·∫•u tr√∫c ch·∫Øc ch·∫Øn ƒë·ªÉ tho·∫£i m√°i l√¢u d√†i.",
        specificationsEn: { "Size": "King (180x200cm)", "Height": "120cm", "Material": "Wood + Fabric" },
        specificationsVi: { "K√≠ch th∆∞·ªõc": "King (180x200cm)", "Chi·ªÅu cao": "120cm", "Ch·∫•t li·ªáu": "G·ªó + V·∫£i" }
      },
      {
        slug: "office-chair-ergonomic",
        nameEn: "Ergonomic Office Chair",
        nameVi: "Gh·∫ø VƒÉn Ph√≤ng Ergonomic",
        descriptionEn: "Comfortable ergonomic office chair with lumbar support",
        descriptionVi: "Gh·∫ø vƒÉn ph√≤ng ergonomic tho·∫£i m√°i v·ªõi h·ªó tr·ª£ th·∫Øt l∆∞ng",
        price: 299.99,
        originalPrice: 399.99,
        images: ["/images/business-slide2.jpg", "/images/business-slide3.jpg"],
        room: "Office",
        type: "Chair",
        category: "Furniture",
        inStock: true,
        stock: 25,
        featured: false,
        featuresEn: ["Lumbar support", "Adjustable height", "Breathable mesh"],
        featuresVi: ["H·ªó tr·ª£ th·∫Øt l∆∞ng", "ƒêi·ªÅu ch·ªânh ƒë·ªô cao", "L∆∞·ªõi tho√°ng kh√≠"],
        longDescriptionEn: "Professional ergonomic office chair designed for long working hours with excellent lumbar support and breathable materials.",
        longDescriptionVi: "Gh·∫ø vƒÉn ph√≤ng ergonomic chuy√™n nghi·ªáp ƒë∆∞·ª£c thi·∫øt k·∫ø cho th·ªùi gian l√†m vi·ªác d√†i v·ªõi h·ªó tr·ª£ th·∫Øt l∆∞ng tuy·ªát v·ªùi v√† v·∫≠t li·ªáu tho√°ng kh√≠.",
        specificationsEn: { "Height": "Adjustable 42-52cm", "Width": "65cm", "Material": "Mesh + Plastic" },
        specificationsVi: { "Chi·ªÅu cao": "ƒêi·ªÅu ch·ªânh 42-52cm", "Chi·ªÅu r·ªông": "65cm", "Ch·∫•t li·ªáu": "L∆∞·ªõi + Nh·ª±a" }
      },
      {
        slug: "bookshelf-wooden",
        nameEn: "5-Tier Wooden Bookshelf",
        nameVi: "K·ªá S√°ch G·ªó 5 T·∫ßng",
        descriptionEn: "Spacious 5-tier wooden bookshelf for storage",
        descriptionVi: "K·ªá s√°ch g·ªó 5 t·∫ßng r·ªông r√£i ƒë·ªÉ l∆∞u tr·ªØ",
        price: 199.99,
        originalPrice: 249.99,
        images: ["/images/business-slide5.jpg", "/images/business-slide6.jpg"],
        room: "Study",
        type: "Storage",
        category: "Furniture",
        inStock: true,
        stock: 20,
        featured: false,
        featuresEn: ["5 shelves", "Solid wood", "Easy assembly"],
        featuresVi: ["5 k·ªá", "G·ªó nguy√™n kh·ªëi", "D·ªÖ l·∫Øp r√°p"],
        longDescriptionEn: "This spacious 5-tier bookshelf provides ample storage space for books, decorations, and other items.",
        longDescriptionVi: "K·ªá s√°ch 5 t·∫ßng r·ªông r√£i n√†y cung c·∫•p kh√¥ng gian l∆∞u tr·ªØ r·ªông cho s√°ch, ƒë·ªì trang tr√≠ v√† c√°c v·∫≠t d·ª•ng kh√°c.",
        specificationsEn: { "Height": "180cm", "Width": "80cm", "Depth": "30cm", "Material": "Pine Wood" },
        specificationsVi: { "Chi·ªÅu cao": "180cm", "Chi·ªÅu r·ªông": "80cm", "Chi·ªÅu s√¢u": "30cm", "Ch·∫•t li·ªáu": "G·ªó Th√¥ng" }
      },
      {
        slug: "coffee-table-glass",
        nameEn: "Glass Coffee Table",
        nameVi: "B√†n C√† Ph√™ K√≠nh",
        descriptionEn: "Modern glass coffee table with metal legs",
        descriptionVi: "B√†n c√† ph√™ k√≠nh hi·ªán ƒë·∫°i v·ªõi ch√¢n kim lo·∫°i",
        price: 349.99,
        originalPrice: 449.99,
        images: ["/images/business-slide1.jpg", "/images/business-slide3.jpg"],
        room: "Living Room",
        type: "Table",
        category: "Furniture",
        inStock: false,
        stock: 0,
        featured: false,
        featuresEn: ["Tempered glass", "Chrome legs", "Easy to clean"],
        featuresVi: ["K√≠nh c∆∞·ªùng l·ª±c", "Ch√¢n chrome", "D·ªÖ v·ªá sinh"],
        longDescriptionEn: "Sleek modern coffee table with tempered glass top and stylish chrome legs, perfect for contemporary living rooms.",
        longDescriptionVi: "B√†n c√† ph√™ hi·ªán ƒë·∫°i b√≥ng b·∫©y v·ªõi m·∫∑t k√≠nh c∆∞·ªùng l·ª±c v√† ch√¢n chrome th·ªùi trang, ho√†n h·∫£o cho ph√≤ng kh√°ch ƒë∆∞∆°ng ƒë·∫°i.",
        specificationsEn: { "Length": "120cm", "Width": "60cm", "Height": "45cm", "Material": "Glass + Chrome" },
        specificationsVi: { "Chi·ªÅu d√†i": "120cm", "Chi·ªÅu r·ªông": "60cm", "Chi·ªÅu cao": "45cm", "Ch·∫•t li·ªáu": "K√≠nh + Chrome" }
      }
    ];

    for (const productInfo of productData) {
      const product = await prisma.product.create({
        data: productInfo
      });
      products.push(product);
    }

    // Create shopping carts for some users
    console.log("üõí Creating shopping carts...");
    for (let i = 0; i < 5; i++) {
      const user = retailUsers[i];
      const cart = await prisma.cart.create({
        data: {
          userId: user.id
        }
      });

      // Add random items to cart (ensure no duplicates)
      const numItems = Math.floor(Math.random() * 3) + 1;
      const usedProductIds = new Set();
      
      for (let j = 0; j < numItems; j++) {
        let randomProduct;
        let attempts = 0;
        
        // Find a product that hasn't been added to this cart yet
        do {
          randomProduct = products[Math.floor(Math.random() * products.length)];
          attempts++;
        } while (usedProductIds.has(randomProduct.id) && attempts < 10);
        
        if (!usedProductIds.has(randomProduct.id)) {
          usedProductIds.add(randomProduct.id);
          await prisma.cartItem.create({
            data: {
              cartId: cart.id,
              productId: randomProduct.id,
              quantity: Math.floor(Math.random() * 3) + 1
            }
          });
        }
      }
    }

    // Create orders
    console.log("üì¶ Creating orders...");
    const orderStatuses = ['pending', 'confirmed', 'shipped', 'delivered', 'cancelled'];
    const allUsers = [...retailUsers, ...wholesaleUsers];

    for (let i = 0; i < 15; i++) {
      const randomUser = allUsers[Math.floor(Math.random() * allUsers.length)];
      const status = orderStatuses[Math.floor(Math.random() * orderStatuses.length)];
      
      // Create order
      const order = await prisma.order.create({
        data: {
          userId: randomUser.id,
          status,
          total: 0, // Will calculate below
          createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000) // Random date within last 30 days
        }
      });

      // Add order items
      const numItems = Math.floor(Math.random() * 4) + 1;
      let orderTotal = 0;
      const usedProductIds = new Set();

      for (let j = 0; j < numItems; j++) {
        let randomProduct;
        let attempts = 0;
        
        // Find a product that hasn't been added to this order yet
        do {
          randomProduct = products[Math.floor(Math.random() * products.length)];
          attempts++;
        } while (usedProductIds.has(randomProduct.id) && attempts < 10);
        
        if (!usedProductIds.has(randomProduct.id)) {
          usedProductIds.add(randomProduct.id);
          const quantity = Math.floor(Math.random() * 3) + 1;
          const price = Number(randomProduct.price);

          await prisma.orderItem.create({
            data: {
              orderId: order.id,
              productId: randomProduct.id,
              quantity,
              price
            }
          });

          orderTotal += price * quantity;
        }
      }

      // Update order total
      await prisma.order.update({
        where: { id: order.id },
        data: { total: orderTotal }
      });
    }

    // Create inquiry forms
    console.log("üìù Creating inquiry forms...");
    const inquiryServices = [
      'general-inquiry',
      'product-consultation',
      'bulk-order',
      'wholesale-account',
      'custom-design',
      'delivery-service'
    ];

    const inquiryData = [
      {
        name: "Jennifer Wilson",
        email: "jennifer@example.com",
        mobile: "+1234567810",
        service: "wholesale-account",
        note: "I'm interested in setting up a wholesale account for my furniture store chain. We have 5 locations and are looking for reliable suppliers.",
        companyName: "Wilson Furniture Stores",
        createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000)
      },
      {
        name: "Michael Chen",
        email: "michael@designstudio.com",
        mobile: "+1234567811",
        service: "custom-design",
        note: "We need custom furniture pieces for a hotel project. Looking for modern designs that can be manufactured in bulk.",
        companyName: "Chen Design Studio",
        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)
      },
      {
        name: "Rachel Green",
        email: "rachel@homestore.com",
        mobile: "+1234567812",
        service: "bulk-order",
        note: "Interested in bulk pricing for office furniture. Need approximately 50 chairs and 20 desks for our new office.",
        companyName: "Home & Office Store",
        createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
      },
      {
        name: "Tom Anderson",
        email: "tom@example.com",
        mobile: "+1234567813",
        service: "product-consultation",
        note: "Need help choosing the right sofa for my living room. Looking for something modern but comfortable.",
        createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)
      },
      {
        name: "Lisa Martinez",
        email: "lisa@hotelgroup.com",
        mobile: "+1234567814",
        service: "wholesale-account",
        note: "We operate a boutique hotel chain and are looking for furniture suppliers for our upcoming renovations.",
        companyName: "Boutique Hotel Group",
        createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000)
      },
      {
        name: "David Kim",
        email: "david@example.com",
        mobile: "+1234567815",
        service: "delivery-service",
        note: "What are your delivery options for large furniture items? I'm located about 50 miles from the city.",
        createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000)
      }
    ];

    for (const inquiry of inquiryData) {
      await prisma.inquiryForm.create({
        data: inquiry
      });
    }

    console.log("‚úÖ Dummy data creation completed successfully!");
    console.log("\nüìä Summary:");
    console.log(`üë• Users created: ${retailUsers.length + wholesaleUsers.length + 1} (${retailUsers.length} retail, ${wholesaleUsers.length} wholesale, 1 admin)`);
    console.log(`üõãÔ∏è Products created: ${products.length}`);
    console.log(`üì¶ Orders created: 15`);
    console.log(`üõí Shopping carts created: 5`);
    console.log(`üìù Inquiries created: ${inquiryData.length}`);
    console.log(`üè¢ Business profiles created: ${wholesaleUsers.length}`);
    console.log("\nüîë Admin Login:");
    console.log("Email: admin@nkc.com");
    console.log("Password: admin123");
    console.log("\nüõçÔ∏è Sample Customer Login:");
    console.log("Email: alice@example.com");
    console.log("Password: password123");
    console.log("\nüè¢ Sample Wholesale Login:");
    console.log("Email: john@bigstore.com");
    console.log("Password: password123");

  } catch (error) {
    console.error("‚ùå Error creating dummy data:", error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Run the script
createDummyData()
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
