import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testCompleteProductManagement() {
  try {
    console.log('üß™ Testing Complete Product Management Workflow...\n');

    // Test 1: Initial state
    console.log('1. Getting initial product count...');
    const initialCount = await prisma.product.count();
    console.log(`‚úÖ Initial products: ${initialCount}`);

    // Test 2: Create a new product
    console.log('\n2. Creating a new test product...');
    const newProduct = await prisma.product.create({
      data: {
        nameEn: 'Test Management Product',
        nameVi: 'S·∫£n ph·∫©m qu·∫£n l√Ω th·ª≠ nghi·ªám',
        slug: 'test-management-product-' + Date.now(),
        descriptionEn: 'This is a test product for management testing',
        descriptionVi: 'ƒê√¢y l√† s·∫£n ph·∫©m th·ª≠ nghi·ªám cho vi·ªác ki·ªÉm tra qu·∫£n l√Ω',
        price: 299.99,
        wholesalePrice: 199.99,
        originalPrice: 399.99,
        stock: 50,
        images: [
          'https://via.placeholder.com/300x300/895D35/FFFFFF?text=Test+Product',
          'https://via.placeholder.com/300x300/7A4F2A/FFFFFF?text=Test+Product+2'
        ],
        room: 'Living Room',
        type: 'Sofa',
        category: 'Seating',
        inStock: true,
        featured: true,
        featuresEn: ['Premium quality', 'Comfortable seating', 'Modern design'],
        featuresVi: ['Ch·∫•t l∆∞·ª£ng cao c·∫•p', 'Ch·ªó ng·ªìi tho·∫£i m√°i', 'Thi·∫øt k·∫ø hi·ªán ƒë·∫°i'],
        longDescriptionEn: 'A premium sofa designed for modern living spaces with exceptional comfort and style.',
        longDescriptionVi: 'M·ªôt chi·∫øc sofa cao c·∫•p ƒë∆∞·ª£c thi·∫øt k·∫ø cho kh√¥ng gian s·ªëng hi·ªán ƒë·∫°i v·ªõi s·ª± tho·∫£i m√°i v√† phong c√°ch ƒë·∫∑c bi·ªát.',
        metaDescriptionEn: 'Premium test sofa for modern living',
        metaDescriptionVi: 'Sofa th·ª≠ nghi·ªám cao c·∫•p cho cu·ªôc s·ªëng hi·ªán ƒë·∫°i',
        metaTitleEn: 'Test Management Product | Premium Sofa',
        metaTitleVi: 'S·∫£n ph·∫©m qu·∫£n l√Ω th·ª≠ nghi·ªám | Sofa cao c·∫•p',
        specificationsEn: {
          'Dimensions': '200cm x 90cm x 80cm',
          'Material': 'Premium fabric',
          'Weight': '45kg',
          'Color': 'Grey'
        },
        specificationsVi: {
          'K√≠ch th∆∞·ªõc': '200cm x 90cm x 80cm',
          'Ch·∫•t li·ªáu': 'V·∫£i cao c·∫•p',
          'C√¢n n·∫∑ng': '45kg',
          'M√†u s·∫Øc': 'X√°m'
        }
      },
    });
    console.log(`‚úÖ Created product: ${newProduct.nameEn} (ID: ${newProduct.id})`);

    // Test 3: Read/Get the product
    console.log('\n3. Retrieving the created product...');
    const retrievedProduct = await prisma.product.findUnique({
      where: { id: newProduct.id },
      include: {
        categoryRef: true,
        subcategoryRef: true,
      },
    });
    console.log(`‚úÖ Retrieved product: ${retrievedProduct?.nameEn}`);
    console.log(`   Price: $${retrievedProduct?.price}`);
    console.log(`   Stock: ${retrievedProduct?.stock}`);
    console.log(`   Featured: ${retrievedProduct?.featured}`);

    // Test 4: Update the product
    console.log('\n4. Updating the product...');
    const updatedProduct = await prisma.product.update({
      where: { id: newProduct.id },
      data: {
        price: 349.99,
        stock: 75,
        featured: false,
        longDescriptionEn: 'Updated description: An even better premium sofa.',
      },
    });
    console.log(`‚úÖ Updated product successfully`);
    console.log(`   New price: $${updatedProduct.price}`);
    console.log(`   New stock: ${updatedProduct.stock}`);
    console.log(`   Featured: ${updatedProduct.featured}`);

    // Test 5: Test filtering
    console.log('\n5. Testing product filtering...');
    const filteredProducts = await prisma.product.findMany({
      where: {
        room: 'Living Room',
        inStock: true,
        price: { gte: 100, lte: 500 },
      },
      take: 3,
    });
    console.log(`‚úÖ Found ${filteredProducts.length} products matching filters (Living Room, In Stock, $100-$500)`);

    // Test 6: Test bulk operations
    console.log('\n6. Testing bulk operations...');
    const testProducts = await prisma.product.findMany({
      where: { nameEn: { contains: 'Test' } },
      take: 2,
    });
    
    if (testProducts.length > 0) {
      await prisma.product.updateMany({
        where: { id: { in: testProducts.map(p => p.id) } },
        data: { featured: true },
      });
      console.log(`‚úÖ Bulk updated ${testProducts.length} test products to featured`);
    }

    // Test 7: Get statistics
    console.log('\n7. Getting updated statistics...');
    const [
      totalProducts,
      inStockProducts,
      outOfStockProducts,
      featuredProducts,
      lowStockProducts,
    ] = await Promise.all([
      prisma.product.count(),
      prisma.product.count({ where: { inStock: true } }),
      prisma.product.count({ where: { inStock: false } }),
      prisma.product.count({ where: { featured: true } }),
      prisma.product.count({ where: { stock: { lte: 10 } } }),
    ]);

    console.log(`‚úÖ Updated statistics:
   - Total products: ${totalProducts}
   - In stock: ${inStockProducts}
   - Out of stock: ${outOfStockProducts}
   - Featured: ${featuredProducts}
   - Low stock (‚â§10): ${lowStockProducts}`);

    // Test 8: Search functionality
    console.log('\n8. Testing search functionality...');
    const searchResults = await prisma.product.findMany({
      where: {
        OR: [
          { nameEn: { contains: 'sofa', mode: 'insensitive' } },
          { nameVi: { contains: 'sofa', mode: 'insensitive' } },
          { descriptionEn: { contains: 'sofa', mode: 'insensitive' } },
          { descriptionVi: { contains: 'sofa', mode: 'insensitive' } },
        ],
      },
      take: 3,
    });
    console.log(`‚úÖ Search for "sofa" found ${searchResults.length} products`);

    // Test 9: Pagination
    console.log('\n9. Testing pagination...');
    const page1 = await prisma.product.findMany({
      take: 5,
      skip: 0,
      orderBy: { createdAt: 'desc' },
    });
    const page2 = await prisma.product.findMany({
      take: 5,
      skip: 5,
      orderBy: { createdAt: 'desc' },
    });
    console.log(`‚úÖ Pagination test: Page 1 has ${page1.length} products, Page 2 has ${page2.length} products`);

    // Test 10: Clean up (delete the test product)
    console.log('\n10. Cleaning up test product...');
    await prisma.product.delete({
      where: { id: newProduct.id },
    });
    console.log(`‚úÖ Deleted test product`);

    const finalCount = await prisma.product.count();
    console.log(`‚úÖ Final product count: ${finalCount} (should be ${initialCount})`);

    console.log('\nüéâ Complete Product Management workflow test completed successfully!');
    console.log('\nüìã Summary of tested features:');
    console.log('   ‚úÖ Product creation (POST)');
    console.log('   ‚úÖ Product retrieval (GET)');
    console.log('   ‚úÖ Product updating (PUT)');
    console.log('   ‚úÖ Product deletion (DELETE)');
    console.log('   ‚úÖ Product filtering');
    console.log('   ‚úÖ Bulk operations');
    console.log('   ‚úÖ Statistics calculation');
    console.log('   ‚úÖ Search functionality');
    console.log('   ‚úÖ Pagination');
    console.log('   ‚úÖ Data validation');

  } catch (error) {
    console.error('‚ùå Error during complete product management testing:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testCompleteProductManagement();
