generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  title         String?
  phone         String?
  company       String?
  createdAt     DateTime  @default(now())
  modifiedAt    DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InquiryForm {
  id          String   @id @default(cuid())
  name        String
  email       String
  mobile      String
  service     String
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  attachment  String?
  companyName String?
}

model Product {
  id                String   @id @default(cuid())
  slug              String   @unique
  price             Decimal  @db.Decimal(10, 2)
  originalPrice     Decimal? @db.Decimal(10, 2)
  images            String[]
  room              String
  type              String
  combo             String?
  category          String
  inStock           Boolean  @default(true)
  featured          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  descriptionEn     String
  descriptionVi     String
  featuresEn        String[]
  featuresVi        String[]
  longDescriptionEn String?
  longDescriptionVi String?
  metaDescriptionEn String?
  metaDescriptionVi String?
  metaTitleEn       String?
  metaTitleVi       String?
  nameEn            String
  nameVi            String
  specificationsEn  Json?
  specificationsVi  Json?

  @@index([room])
  @@index([type])
  @@index([combo])
  @@index([featured])
  @@index([inStock])
}
